# @package _global_

# to execute this experiment run:
# python src/train.py experiment=vq_gan_3d


defaults:
  - override /data: lidc_2d
  - override /model: multihead_swin_transformer_ae
  - override /callbacks: multihead_ae_2d
  - override /trainer: default
  - override /logger: wandb

tags: ["autoencoder", "swin_transformer", "lidc2d"]
task_name: "train_autoencoder"

data:
#   data_dir: "/data/hpc/pgl/LIDC-IDRI-2D/data/"
  batch_size: 16
  include_clean: True
  include_label: True
#   image_size: 128
#   train_val_test_split: [80, 10, 10]
#   nodules_only: True
#   include_mask: False
#   include_origin_image: False
#   include_segmentation: True
#   num_workers: 4
#   pin_memory: False

model:
  encoderconfig:
    feature_size: 48
  autoencoderconfig:
    channel_multipliers: [1, 2, 4]
  segmentation_decoder: !!null
  segmentation_criterion: !!null
  classifier_head:
    _target_: src.models.components.classification.resnet2d.ResNet2D

    num_blocks: [3,4,6,3]
    num_classes: 2
    num_channels: 16
  clasification_criterion:
    _target_: src.models.components.loss_function.cross_entropy.CrossEntropyLoss
    weight: [50.0, 1.0]
  loss: 
    _target_: src.models.components.vq_gan_2d.losses.vqperceptual.VQLPIPSWithDiscriminator
    disc_start: 10000
    codebook_weight: 1.0
    disc_num_layers: 2
    disc_in_channels: 1
    disc_weight: 0.6
    disc_conditional: false
    n_classes: 1

logger: 
  wandb:
    name: "swin_cls"

callbacks:
  log_image:
    frequency: 1
    seg_head: True
  log_metrics:
    ssim:
      _target_: torchmetrics.image.StructuralSimilarityIndexMeasure
      data_range: 1.0
    psnr:
      _target_: torchmetrics.image.PeakSignalNoiseRatio
      data_range: 1.0
    seg_head: True
  model_checkpoint:
    monitor: "val/ssim"
    mode: "max"
    save_last: True
  # classification_metrics: !
  segmentation_metrics: !!null
  mask2d_logger: !!null

trainer:
  max_epochs: 1000

